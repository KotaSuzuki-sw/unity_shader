// https://baba-s.hatenablog.com/entry/2018/10/11/170000 参照,備忘録兼ねて
// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

Shader "Newname/new"
//Shaderの名前を決めるブロック、ファイル名と一致させる必要はない
{
    Properties
    //MaterialのInspectorで設定したいプロパティの記述を行うブロック
    //プロパティ名("Inspectorに表示する名前",型) default値{オプション}で記述される
    {
        _Factor ("Factor", Range(0, 5)) = 1.0
    }
    SubShader
    //Shaderの肝,shaderによって実現したい内容を記述する.複数設定することが可能
    {
        Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
        //unityにshaderの設定を伝える
        //TransparentはMaterial表面を半透明にする
        //passの外側にあるため、ほかのすべてのSubShaderに引き継がれる

        GrabPass { }
        //このパスが実行される時点のレンダリング結果を取得できる特殊なパス
        //一般的に重い処理となる

        Pass
        //shader本体の記述(固定機能シェーダorサーフェスシェーダor頂点フラグメントシェーダ)
        //passは複数記述可能. 
        {
            CGPROGRAM //Cg言語を使う合図
            #pragma vertex vert
            #pragma fragment frag
            #pragma fragmentoption ARB_precision_hint_fastest
            //pragmaがコンパイラに対して情報を渡す

            #include "UnityCG.cginc"
            //Cg言語用のインクルードファイル拡張子

            struct appdata //頂点シェーダへ入力する頂点データの定義
            {
                float4 vertex : POSITION; //頂点の空間座標の取得
                float2 uv : TEXCOORD0; //頂点のUV座標を保存。n番目のテクスチャUV(色),UnlitShaderでは頂点座標に対してテクスチャUVを1つ受け取る
            };

            struct v2f //vertex to fragment,情報の受け渡し、モデルをカメラで写した時のスクリーン上での座興に変換
            {
                float4 pos : SV_POSITION; //座標変換された後の頂点座標の取得
                float4 uv : TEXCOORD0; //テクスチャUV座標の取得
            };

            v2f vert (appdata v) //v2f 関数名 (頂点データ型　頂点データ変数名)
            {
                v2f o;
                //以降,頂点シェーダの処理
                o.pos = UnityObjectToClipPos(v.vertex); //3D空間からスクリーン上の位置へ座標変換を行う関数
                o.uv = ComputeGrabScreenPos(o.pos); //スクリーン上の座標をuv座標と一致させる(Mesh座標とTexture座標の一致のような)
                return o;
            }
            
            //GrabPassの結果を取得
            sampler2D _GrabTexture; //低精度サンプラー
            float4 _GrabTexture_TexelSize;
            float _Factor;

            half4 frag (v2f i) : SV_Target
            {

                half4 pixelCol = half4(0, 0, 0, 0); //red/green/blue/alphaの順に色指定

                #define ADDPIXEL(weight,kernelX) tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(float4(i.uv.x + _GrabTexture_TexelSize.x * kernelX * _Factor, i.uv.y, i.uv.z, i.uv.w))) * weight
                /*
                ・特定の文字列を定義、コンパイル時に1つ目の文字列を2つ目の文字列に置き換える命令
                ・tex2Dprojはwで除算してからtex2Dを行う関数、(奥行き(z)を正規化して2D平面のどの位置に該当ピクセルが来るのか計算)
                ・UNITY_PROF_COORDは4成分ベクトルを渡すと、投影されたテクスチャ読み込みに適切なテクスチャ座標を戻す
                ・_Factorの値によって変化させるUV値の幅が大きくなる→ぼかし度合いが変化可能
                ・ガウシアンブラー？
                */
                
                pixelCol += ADDPIXEL(0.05, 4.0);
                pixelCol += ADDPIXEL(0.09, 3.0);
                pixelCol += ADDPIXEL(0.12, 2.0);
                pixelCol += ADDPIXEL(0.15, 1.0);
                pixelCol += ADDPIXEL(0.18, 0.0);
                pixelCol += ADDPIXEL(0.15, -1.0);
                pixelCol += ADDPIXEL(0.12, -2.0);
                pixelCol += ADDPIXEL(0.09, -3.0);
                pixelCol += ADDPIXEL(0.05, -4.0);
                return pixelCol;
                
                //ADDPIXELでtex2Dprojを呼び出し、UV値のUを少しずつ変化させている。その結果をpixelColで返す→横方向にブラーをかけている
                //ADDPIXELについての詳細がunity公式でも確認できなかった。表示されている画像の各ピクセル値を変化させ重ね塗りを行っている？
            }
            ENDCG
        }

        GrabPass { }
        //横方向のブラーをかけたフレームバッファをテクスチャとして読み込む

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma fragmentoption ARB_precision_hint_fastest

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float4 pos : SV_POSITION;
                float4 uv : TEXCOORD0;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv = ComputeGrabScreenPos(o.pos);
                return o;
            }

            sampler2D _GrabTexture; //低精度サンプラー
            float4 _GrabTexture_TexelSize;
            float _Factor;

            fixed4 frag (v2f i) : SV_Target
            {

                fixed4 pixelCol = fixed4(0, 0, 0, 0); //なぜかV値の方は精度が低いfixedを用いてpixelColを返している。

                #define ADDPIXEL(weight,kernelY) tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(float4(i.uv.x, i.uv.y + _GrabTexture_TexelSize.y * kernelY * _Factor, i.uv.z, i.uv.w))) * weight

                pixelCol += ADDPIXEL(0.05, 4.0);
                pixelCol += ADDPIXEL(0.09, 3.0);
                pixelCol += ADDPIXEL(0.12, 2.0);
                pixelCol += ADDPIXEL(0.15, 1.0);
                pixelCol += ADDPIXEL(0.18, 0.0);
                pixelCol += ADDPIXEL(0.15, -1.0);
                pixelCol += ADDPIXEL(0.12, -2.0);
                pixelCol += ADDPIXEL(0.09, -3.0);
                pixelCol += ADDPIXEL(0.05, -4.0);
                return pixelCol;
                
                //縦方向へのブラー
                //こちらはUV値のVをUと同じずつ変化させている。同様にpixelColで返す。
            }
            ENDCG
        }
    }
}
